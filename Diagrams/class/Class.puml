@startuml class

skinparam Dpi 500
class Block {
    +blockPosition
    +itemID
    +textureName
    +breakTime
    +hardness
    +image
    +rect
    +init(blockSize, blockPosition, itemID, textureName, hardness, breakTime)
    +getHardness()
}

class breakPlaceHandler {
    +immovableBlocks
    +clickableBlocks
    +textureNames
    +itemIDs
    +breakTimes
    +blockHardness
    +checkBreakable(block, inHand)
    +blockBreak(python_pos, world_block, player, test, sound)
    +blockPlace(python_pos, world_block, player, test, sound)
    +getBlockFromPos(pos, world_block)
}

class Camera {
    +offset
    +hWidth
    +hHeight
    +Player
    +init(player)
    +scroll()
    +draw(screen, worldBlocks)
    +getOffsets()
    +isColideable(block)
    +isOnScreen(block)
}

class ChunkGenerator {
    +textureNames
    +itemIDs
    +blockHardness
    +breakTime
    +drawOre(world, x, y, ore)
    +drawCave(world, x, y)
    +drawTree(world, y, x)
    +getWorldSprites(world, generatePos)
    +generateChunk(generatePos, worldBlocks)
}

class ChunkHandler {
    +updateChunkPositions(playerChunk)
    +checkChunkUpdates(player, worldBlocks)
}

class Button {
    +itemIDs
    +textureNames
    +itemID
    +pos
    +image
    +rect
    +init(itemID, pos, width, height)
}

class Crafting {
    +itemIDs
    +textureNames
    +isPlaceable
    +itemHardness
    +items
    +slots
    +relative
    +buttonFront
    +NullItem
    +craftArray
    +relativeSize
    +recipes
    +allItems
    +screen
    +craftID
    +canCraft
    +init(screen)
    +drawCraft()
    +initGroup()
    +doCraft()
    +onClick(pos)
    +checkCanCraft()
    +emptyTable()
    +craftSpec(cradtingID, playerInventory)
}

class gameSettings {
    +seed
    +actionSpace{}
    +octaves 
    +blockSize 
    +playerRange 
    +width 
    +height 
    +generatedChunks{}
    +CHUNK_SIZE 
    +visibleChunks
    +drawCrafting 
    +craftingTablePos 
    +endGamePlaced 
    +drawPortal 
    +endGamePos 
    +setSeed(string)
    +hasher(string)
    +genRandomSeed()
    +getPos(pos)
    +distance(player, python_pos)
}

class inventoryHandler {
    +itemIDs
    +breakTime
    +items
    +blockHardness
    +itemHardness
    +NullItem
    +invArray
    +selected 
    +fullInv 
    +slots 
    +hotBarrSprite
    +relative 
    +clicked
    +addBlock(block)
    +addItem(item)
    +decrease()
    +decreaseSpec(itemID)
    +getClicked()
    +setClicked()
    +getSelected()
    +selectNext()
    +selectPrevious()
    +clearInv()
    +selectinventory(pos)
    +drawHotBar(screen)
    +getInv()
    +getItemCount(itemID)
    +getItemCountFromInput(ietmID, invArrayInput)
    +drawInv(screen)
    +initGroup()
    +onClick(pos)
}

class slot {
    +image
    +width
    +height 
    +rect 
    +init(colour, left, top, width, height)
}


class itemHandler {
    +items[]
    +itemIDs{}
    +isPlaceable{}
    +blockHardness{}
    +breakTime{}
    +itemHardness{}
    +textureNames{}
    +immovableBlocks[]
    +clickableBlocks[]
    +craftingIDs{}
    +converterIDs{}
    +fetchDict()
    +fetchItemIDs()
    +fetchIsPlaceable()
    +fetchBlockHardness()
    +fetchItemHardness()
    +fetchTextureNames()
}


class itemNew {
    +itemID
    +itemDisplayName
    +breakTime
    +blockHardness 
    +itemHardness 
    +reqToolType
    +toolType 
    +texture 
    +isPlaceable
    +drops 
    +amount 
    +init(itemID, itemDisplayName, breakTime, blockHardness, itemHardness, reqToolType, toolType, texture, isPlaceable, drops)
    +increase()
    +decrease()
    +getCount()
    +getItemID()
    +getItemName()
    +getBreakTime()
    +getBlockHardness()
    +getItemHardness()
    +getReqToolType()
    +getToolType()
    +getTexture()
    +getIsPlaceable()
    +getDrop()
}


class main {
    +textureNames{}
    +itemIDs{}
    +breakTimes{}
    +clock
    +screen
    +gameRunning
    +color_light
    +color_dark
    +buttonFont
    +startPage
    +PausePage
    +infoPage
    +endPage
    +base_font
    +seedFont 
    +user_text
    +input_rect
    +text 
    +textRect
    +text_surface
    +color_active
    +color_passive
    +color 
    +activeBox
    +worldBlocks
    +collisionblocks
    +player
    +camera
    +startTime 
    +startPos
    +crafter
    +mouseDownCheck
    +fakeKeys{}
    +font
    +fpsText
    +seedText
    +bg
    +collisionblocks
    +blockFrameImgName
    +breakTime
    +block
    +blockFrameImg
    +blockFrame 
    +mousePos
    +blockPos 
    +mouse
    +startButtonText
    +exitButtonText
    +informationButtonText
    +gameMenu()
}

class menuHandler {
    +infoMenu(screen, clock, infoPage)
    +pauseMenu(screen, clock, pausePage)
    +mouseOffPause(clock)
    +endMenu(screen, clock, endPage)
}

class Player {
    +playerSize
    +image
    +jumped
    +rect
    +direction
    +gravity
    +character
    +y_momentum
    +keys
    +count
    +getPlayerPos()
    +MoveOnX(fakeKeys)
    +useGravity()
    +jump()
    +jumpArc()
    +collided(blocks)
    +update(dt, blocks, sound)
    +stopMoveOnX()
    +willcollide(block)
}

' class Portal {
'     +blockPosition 
'     +itemID 
'     +textureName 
'     +hardness 
'     +image 
'     +rect 
'     +init(blockSize, blockPosition, itemID, textureName, hardness)
'     +getHardness()
' }

class RecipeHandler {
    +file
    +data
    +recipe{}
    +init()
    +getRecipeInfo(itemID)
    +getRecipe(itemID)
    +getCraftingAmount(itemID)
    +getAllItemIDs()
    +getCraftingShape(itemID)
    +getCraftingMatrix(itemID)
    +getItemIDFromCraftingID(craftingID)
}

class rewardsHandler {
    +populateStages()
}

class soundHandler {
    +audio 
    +getGrassSound()
    +playMusic()
    +stopMusic()
    +playSoundForID(id)
    +playBreakSoundforID(id)
}

class Stage {
    +goalItems
    +acquisitionRewards
    +complete 
    +failure
    +reward 
    +penalty
    +misc 
    +init(goalItems, acquisitionRewards, complete, failure, reward, penalty, misc)
    +getGoalItems()
    +getAquisitionRewards()
    +getComplete()
    +getFailure()
    +getReward()
    +getPenalty()
    +getMisc()
}

/'
class Text {
    +my_font
    +words
    +image
    +pos
    +rect
    +init(text, fontSize, color, pos, background)
}
'/

class MainGym {
    +env
    +obs 
    +info 
    +done 
    +action
    +envSeed
}

class CustomEnv {
    +metadata{}
    +seed
    +pygame 
    +action_space
    +observation_space
    +render_mode
    +easyStart
    +spawnLoc
    +init(render_mode, easyStart, seed, spawnLoc)
    +reset(seed, seed, options, spawnLoc)
    +step(action)
    +render()
}
class MinePy {
    +itemIDs{}
    +items{}
    +metadata{}
    +seed
    +task
    +render_mode
    +inv
    +screen
    +clock 
    +game_speed
    +stage 
    +done
    +player 
    +camera 
    +worldBlocks 
    +collisionblocks
    +crafter 
    +offset
    +playerPos 
    +cursorPos
    +isBP 
    +actionImage
    +textureNames
    +textureNames{}
    +init(render_mode, easyStart, playerRange, seed, spawnLoc, task)
    +action(action)
    +evalutate(prev)
    +getPrevInv()
    +is_done()
    +observe()
    +view()
}


main --* Player
main --* Camera
main --* Crafting
main --* Block
main --> gameSettings
main --> breakPlaceHandler
main --> inventoryHandler
main --> ChunkGenerator
main --> ChunkHandler
main --> menuHandler
main --> soundHandler
main --> itemHandler

breakPlaceHandler --* Block
breakPlaceHandler --> Block
breakPlaceHandler --> gameSettings
breakPlaceHandler --> inventoryHandler
breakPlaceHandler --> soundHandler
breakPlaceHandler --> itemHandler

Camera --> gameSettings

ChunkGenerator --> gameSettings
ChunkGenerator --* Block
ChunkGenerator --> itemHandler

ChunkHandler --> gameSettings
ChunkHandler --> ChunkGenerator

Button --> itemHandler

Crafting --> RecipeHandler
Crafting --> gameSettings
Crafting --> inventoryHandler
Crafting --* slot
Crafting --> slot
Crafting --* itemNew
Crafting --> itemHandler

inventoryHandler --* itemNew
inventoryHandler --* slot
inventoryHandler --* Block
inventoryHandler --> gameSettings
inventoryHandler --> itemHandler

itemHandler --* itemNew

menuHandler --> gameSettings

Player --> soundHandler

RecipeHandler --> itemHandler

rewardsHandler --* Stage

soundHandler --> gameSettings

MinePy --> gameSettings
MinePy --> ChunkGenerator
MinePy --* Player
MinePy --* Camera
MinePy --> inventoryHandler
MinePy --> breakPlaceHandler
MinePy --* Crafting
MinePy --> Crafting
MinePy --> itemHandler
MinePy --> rewardsHandler
MinePy --> ChunkHandler

CustomEnv --* MinePy
CustomEnv --> inventoryHandler
CustomEnv --> gameSettings

MainGym --> CustomEnv

@enduml