@startuml class

skinparam Dpi 500
class Block {
    +blockPosition
    +itemID
    +textureName
    +hardness
    +image
    +rect
    +init(blockSize, blockPosition, itemID, textureName, hardness)
    +getHardness()
}

class breakPlaceHandler {
    +checkBreakable(block, inHand)
    +blockBreak(python_pos, world_block, player, test, sound)
    +blockPlace(python_pos, world_block, player, test, sound)
    +getBlockFromPos(pos, world_block)
}

class Camera {
    +offset
    +hWidth
    +hHeight
    +Player
    +init(player)
    +scroll()
    +draw(screen, worldBlocks)
    +getOffsets()
    +isColideable(block)
    +isOnScreen(block)
}

class ChunkGenerator {
    +drawOre(world, x, y, ore)
    +drawCave(world, x, y)
    +drawTree(world, y, x)
    +getWorldSprites(world, generatePos)
    +generateChunk(generatePos, worldBlocks)
}

class ChunkHandler {
    +updateChunkPositions(playerChunk)
    +checkChunkUpdates(player, worldBlocks)
}

class Button {
    +itemID
    +pos
    +image
    +rect
    +init(itemID, pos, width, height)
}

class Crafting {
    +slots
    +relative
    +buttonFront
    +NullItem
    +craftArray
    +relativeSize
    +recipes
    +allItems
    +screen
    +craftID
    +canCraft
    +init(screen)
    +drawCraft()
    +initGroup()
    +doCraft()
    +onClick(pos)
    +checkCanCraft()
    +emptyTable()
}

class gameSettings {
    +seed
    +actions{}
    +octaves 
    +blockSize 
    +playerRange 
    +width 
    +height 
    +generatedChunks{}
    +CHUNK_SIZE 
    +visibleChunks
    +drawCrafting 
    +craftingTablePos 
    +endGamePlaced 
    +drawPortal 
    +endGamePos 
    +setSeed(string)
    +hasher(string)
    +getPos(pos)
    +distance(player, python_pos)
    +itemIDs{}
    +blockHardness{}
    +itemHardness{}
    +isPlaceable{}
    +craftingIDs{}
    +converterIDs{}
    +textureNames{}
    +immovableBlocks
    +clickableBlocks
}

class inventoryHandler {
    +NullItem
    +invArray
    +itemIDs
    +selected 
    +fullInv 
    +slots 
    +hotBarrSprite
    +relative 
    +clicked
    +addBlock(block)
    +addItem(item)
    +decrease()
    +decreaseSpec(itemID)
    +getClicked()
    +setClicked()
    +getSelected()
    +selectNext()
    +selectPrevious()
    +drawHotBar(screen)
    +getInv()
    +getItemCount(itemID)
    +drawInv(screen)
    +initGroup()
    +onClick(pos)

}

class slot {
    +image
    +width
    +height 
    +rect 
    +init(colour, left, top, width, height)
}

class Item {
    +itemName
    +itemID
    +isPlaceable
    +hardness
    +amount
    +texture
    +init(*args)
    +getItemName()
    +getItemID()
    +increase()
    +decrease()
    +getCount()
    +getHardness()
}

/'
class itemHandler {
    +itemsDict{}
    +items
    +immovableBlocks
    +clickableBlocks
    +craftingIDs{}
    +fetchDict()
}

class itemNew {
    +itemID
    +itemDisplayName
    +breakTime
    +blockHardness 
    +itemHardness 
    +reqToolType
    +toolType 
    +texture 
    +isPlaceable
    +drops 
    +amount 
    +init(itemID, itemDisplayName, breakTime, blockHardness, itemHardness, reqToolType, toolType, texture, isPlaceable, drops)
    +increase()
    +decrease()
    +getCount()
    +getItemID()
    +getItemName()
    +getBreakTime()
    +getBlockHardness()
    +getItemHardness()
    +getReqToolType()
    +getToolType()
    +getTexture()
    +getIsPlaceable()
    +getDrop()
}
'/

class main {
    +clock
    +screen
    +gameRunning
    +color_light
    +color_dark
    +buttonFont
    +startPage
    +PausePage
    +infoPage
    +endPage
    +base_font
    +seedFont 
    +user_text
    +input_rect
    +text 
    +textRect
    +text_surface
    +color_active
    +color_passive
    +color 
    +activeBox
    +worldBlocks
    +collisionblocks
    +player
    +camera
    +startTime 
    +startPos
    +crafter
    +mouseDownCheck
    +fakeKeys{}
    +font
    +fpsText
    +seedText
    +bg
    +collisionblocks
    +blockFrameImgName
    +breakTime
    +block
    +blockFrameImg
    +blockFrame 
    +mousePos
    +blockPos 
    +mouse
    +startButtonText
    +exitButtonText
    +informationButtonText
    +gameMenu()
}

class menuHandler {
    +infoMenu(screen, clock, infoPage)
    +pauseMenu(screen, clock, pausePage)
    +mouseOffPause(clock)
    +endMenu(screen, clock, endPage)
}

class Player {
    +playerSize
    +image
    +jumped
    +rect
    +direction
    +gravity
    +character
    +y_momentum
    +keys
    +count
    +getPlayerPos()
    +MoveOnX(fakeKeys, move)
    +useGravity()
    +jump()
    +jumpArc()
    +collided(blocks)
    +update(dt, blocks, sound)
    +stopMoveOnX()
    +willcollide(block)
}

class Portal {
    +blockPosition 
    +itemID 
    +textureName 
    +hardness 
    +image 
    +rect 
    +init(blockSize, blockPosition, itemID, textureName, hardness)
    +getHardness()
}

class RecipeHandler {
    +file
    +data
    +recipe{}
    +init()
    +getRecipeInfo(itemID)
    +getRecipe(itemID)
    +getCraftingAmount(itemID)
    +getAllItemIDs()
    +getCraftingShape(itemID)
    +getCraftingMatrix(itemID)
}

class soundHandler {
    +audio 
    +getGrassSound()
    +playMusic()
    +stopMusic()
    +playSoundForID(id)
    +playBreakSoundforID(id)
}

/'
class Text {
    +my_font
    +words
    +image
    +pos
    +rect
    +init(text, fontSize, color, pos, background)
}
'/

class MainGym {
    +env
    +action
}

class CustomEnv {
    +pygame 
    +action_space
    +observation_space
    +init()
    +reset()
    +step()
    +render(mode, clone)
}
class MinePy {
    +screen
    +clock 
    +game_speed
    +player 
    +camera 
    +worldBlocks 
    +collisionblocks
    +init()
    +action(action)
    +evalutate()
    +is_done()
    +observe()
    +view()
}


main --* Player
main --* Camera
main --* Crafting
main --* Block
main --> gameSettings
main --> breakPlaceHandler
main --> inventoryHandler
main --> ChunkGenerator
main --> ChunkHandler
main --> menuHandler
main --> soundHandler

breakPlaceHandler --* Block
breakPlaceHandler --> Block
breakPlaceHandler --> gameSettings
breakPlaceHandler --> inventoryHandler
breakPlaceHandler --> soundHandler

Camera --> gameSettings

ChunkGenerator --> gameSettings
ChunkGenerator --* Block

ChunkHandler --> gameSettings
ChunkHandler --> ChunkGenerator

Button --> gameSettings

Crafting --> RecipeHandler
Crafting --* Button
Crafting --* Item
Crafting --> gameSettings
Crafting --> inventoryHandler
Crafting --* slot
Crafting --> slot

inventoryHandler --* Item
inventoryHandler --* slot
inventoryHandler --* Block
inventoryHandler --> gameSettings

/'itemHandler --* itemNew
'/

Item --> gameSettings

menuHandler --> gameSettings

Player --> gameSettings
Player --> soundHandler

Portal --> gameSettings

RecipeHandler --> gameSettings

soundHandler --> gameSettings

MinePy --> gameSettings
MinePy --> ChunkGenerator
MinePy --* Player
MinePy --* Camera

CustomEnv --* MinePy

MainGym --> CustomEnv

@enduml